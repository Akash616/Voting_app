const express = require('express')
const router = express.Router(); //diff. end point ka manage karta hai.
const User = require('./../models/user');
const Candidate = require('./../models/candidate'); //2 file picha hai
const {jwtAuthMiddleware, generateToken} = require('./../jwt');


const checkItIsAdmin = async (userID) => {
  try{
      const user = await User.findById(userID);
      return user.role === 'admin';
  } catch (err){
    return false;
  }
}

//POST route to add a candidate
router.post('/', jwtAuthMiddleware, async (req, res) => {
  
  try{

    //token ka anadar say data(id) nikala - use token
    if(! await checkItIsAdmin(req.user.id)){
      console.log('admin role not found'); //debug
      return res.status(403).json({ message: 'user does not have admin role' });
    }else{
      console.log('admin role found'); //debug
    }

    const data = req.body; //assuming the request body contains the candidate data

    //Create a new candidate document using the Mongoose model
    const newCandidate = new Candidate(data);

    //save the new Candidate to the database
    const response = await newCandidate.save();
    console.log('data saved');
    res.status(200).json({response: response});

  } catch(err) {

    console.log(err);
    res.status(500).json({ error: 'Internal Server Error'});

  }

});

router.put('/:candidateId', jwtAuthMiddleware, async (req, res) => {
    try{

       //token ka anadar say data(id) nikala - use token
      if(!checkItIsAdmin(req.user.id)){
        return res.status(403).json({ message: 'user does not have admin role' });
      }

      const candidateId = req.params.candidateId; //Extract the id form the URL parameter
      const updatedCandidateData = req.body; //Updated data for the person

      const response = await Candidate.findByIdAndUpdate(candidateId, updatedCandidateData, {
        new: true, //Return the updated documnet
        runValidators: true //Run mongoose validation
      });

      if(!response){ //if id is not present
        return res.status(404).json({ erroe: 'Candidate not found' });
      }

      console.log('Candidate data updated');
      res.status(200).json(response);

    }catch(err){
      console.log(err);
      res.status(500).json({error: 'Internal Server Error'});
    }
  });

  router.delete('/:candidateId', jwtAuthMiddleware, async (req, res) => {
    try{

       //token ka anadar say data(id) nikala - use token
      if(!checkItIsAdmin(req.user.id)){
        return res.status(403).json({ message: 'user does not have admin role' });
      }

      const candidateId = req.params.candidateId; //Extract the id form the URL parameter

      const response = await Candidate.findByIdAndDelete(candidateId);

      if(!response){ //if id is not present
        return res.status(404).json({ erroe: 'Candidate not found' });
      }

      console.log('Candidate deleted');
      res.status(200).json(response);

    }catch(err){
      console.log(err);
      res.status(500).json({error: 'Internal Server Error'});
    }
  });

  //Let's start voting
  router.post('/vote/:candidateId', jwtAuthMiddleware, async (req, res) => {
      // no admin can vote
      // user can only vote once

      const candidateId = req.params.candidateId;
      const userId = req.user.id;


      try{

        //Find the Candidate document with the specified candidateId
        const candidate = await Candidate.findById(candidateId);
        if(!candidate){
          return res.status(404).json({ message: 'Candidate not found' });
        }

        const user = await User.findById(userId);
        if(!user){
          return res.status(404).json({ message: 'User not found' });
        }

        if(user.isVoted){
          return res.status(400).json({ message: 'You have already voted'});
        }

        if(user.role == 'admin'){
          return res.status(403).json({ message: 'Admin is not allowed' });
        }

        //Update the Candidate document to record the vote
        candidate.votes.push({user: userId});
        candidate.voteCount++;
        await candidate.save();

        //Update the user document
        user.isVoted = true;
        await user.save();

        res.status(200).json({ message: 'Vote recorded successfully'})

      }catch(err){
        console.log(err);
        res.status(500).json({error: 'Internal Server Error'});
      }

  });

  //Vote count
  router.get('/vote/count', async (req, res) => {
    try{
        //Find all candidates and sort them by voteCount in descending order
        const candidate = await Candidate.find().sort({ voteCount: 'desc'});

        //Map the candidates to only return their name and voteCount
        const voteRecord = candidate.map( (data) => {
            return {
              party : data.party,
              count: data.voteCount
            }

        });

        return res.status(200).json(voteRecord);

    }catch(err){
        console.log(err);
        res.status(500).json({error: 'Internal Server Error'});
      }
  });


  //List of candidates
  router.get('/candidates', async (req, res) => {
      try{

          const candidate = await Candidate.find();
          const response = candidate.map( (data) => {
              return {
                name: data.name,
                party: data.party
              }
          });

          return res.status(200).json(response);

      }catch(err){
        console.log(err);
        res.status(500).json({error: 'Internal Server Error'});
      }
  });


  module.exports = router;
  
  